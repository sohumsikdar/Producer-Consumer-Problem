diff --git a/kernel/sys.c b/kernel/sys.c
old mode 100644
new mode 100755
index 6663b77ec..622983e7e
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -42,6 +42,11 @@
 #include <linux/version.h>
 #include <linux/ctype.h>
 #include <linux/syscall_user_dispatch.h>
+#include <linux/module.h>
+#include <linux/cdev.h>
+#include <asm/uaccess.h>
+#include <linux/semaphore.h>
+#include <linux/delay.h>
 
 #include <linux/compat.h>
 #include <linux/syscalls.h>
 
 /*
  * setgid() is implemented like SysV w/ SAVED_IDS
@@ -1430,6 +1420,122 @@ SYSCALL_DEFINE2(setdomainname, char __user *, name, int, len)
 	}
 	return errno;
 }

+struct semaphore s1, s2, s3;
+unsigned long long *cirQue = NULL;
+int front = -1;
+int rear = -1;
+int size = 8;
+
+SYSCALL_DEFINE1(writer, unsigned long long, element)
+{
+    if ((front == rear + 1) || (front == 0 && rear == size - 1)) {
+        return 1;
+    }
+    else
+    {   
+        if(cirQue == NULL)
+        {
+            cirQue = (unsigned long long *) kmalloc(size * sizeof(unsigned long long), GFP_KERNEL);
+			sema_init(&s1, size);
+			sema_init(&s2, 1);
+			sema_init(&s3, 0);
+            front = -1;
+            rear = -1;
+        }
+
+		down(&s1);
+		down(&s2);
+
+        if (front == -1)
+            front = 0;
+        rear = (rear + 1) % size;
+        cirQue[rear] = element;
+
+		up(&s2);
+		up(&s3);
+
+        printk("Enqueued Element is: %llu\n", element);
+        return 0;
+    }
+}
+
+SYSCALL_DEFINE1(reader, unsigned long long *, val)
+{
+	unsigned long long element;
+	
+	if(cirQue == NULL)
+    {
+        cirQue = (unsigned long long *) kmalloc(size * sizeof(unsigned long long), GFP_KERNEL);
+		sema_init(&s1, size);
+		sema_init(&s2, 1);
+		sema_init(&s3, 0);
+        front = -1;
+        rear = -1;
+    }
+	
+    if (front == -1)
+    {
+        front = -1;
+        rear = -1;
+        return 1;
+    }
+    else
+    {	
+		down(&s3);
+		down(&s2);
+        element = cirQue[front];
+        if (front == rear)
+        {
+            front = -1;
+            rear = -1;
+        }
+        else
+        {
+            front = (front + 1) % size;
+        }
+
+		up(&s2);
+		up(&s1);
+		if(copy_to_user(val, &element, sizeof(element)))
+		{
+			return -EFAULT;
+		}
+		
+        printk("Dequeued Element is: %llu\n", element);
+        return 0;
+    }
+}
 
 SYSCALL_DEFINE2(getrlimit, unsigned int, resource, struct rlimit __user *, rlim)
 {
